AWSTemplateFormatVersion: '2010-09-09'
Description: The ECS resources
Parameters:
  ECRRepositoryName:
    Type: String
Resources:
  # Custom VPC resources
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetFirst:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-First
  PublicSubnetSecond:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.1.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the second AZ in the list
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public-Second
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetFirstRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetFirst
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetSecondRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetSecond
      RouteTableId: !Ref PublicRouteTable

  # Elastic Load Balancing resources
  AppLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Security group for Application Load Balancer
      GroupName: ECSPipelineLoadBalancerSG
      VpcId: !Ref VPC
      SecurityGroupIngress:
          # Allow access to ALB from anywhere on the internet
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      IpAddressType: ipv4
      Name: ECSPipelineAppLoadBalancer
      Subnets:
        - !Ref PublicSubnetFirst
        - !Ref PublicSubnetSecond
      SecurityGroups:
        - !Ref AppLoadBalancerSG
  TargetGroupLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: ECSTargetGroup
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VPC
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - AppLoadBalancer
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroupLoadBalancer
          Type: 'forward'
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP

  # Task Definition resource
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: practice-ecs-pipeline-task-definition
      ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - PortMappings:
           - ContainerPort: 8080
             HostPort: 80
             Protocol: tcp
          Cpu: 10
          Memory: 300
          Image: !Sub
            - ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}
            - { RepositoryName: !Ref ECRRepositoryName }
          Name: practice-node-server

  # Empty Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: ECSPracticeCluster

  # Security group for container instance
  ContainerInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Security group for ECS container instance
      GroupName: ECSContainerInstanceSG
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref AppLoadBalancerSG
          IpProtocol: -1

  # IAM Role for ECS Container Instance
  ECSInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - ec2.amazonaws.com
          Action:
            - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: ecs-practice-instance-service
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - ecs:CreateCluster
                - ecs:DeregisterContainerInstance
                - ecs:DiscoverPollEndpoint
                - ecs:Poll
                - ecs:RegisterContainerInstance
                - ecs:StartTelemetrySession
                - ecs:Submit*
                - logs:CreateLogStream
                - logs:PutLogEvents
                - ecr:GetAuthorizationToken
                - ecr:BatchGetImage
                - ecr:GetDownloadUrlForLayer
              Resource: '*'

  # Instance profile associated with the IAM role for the instance
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSInstanceRole

  # Container Instance in ECS Cluster
  ECSContainerInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: ami-041382ba1d2dcbd27
      InstanceType: t2.micro
      SubnetId: !Ref PublicSubnetFirst
      SecurityGroupIds:
        - !GetAtt ContainerInstanceSG.GroupId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config

  # ECS service resources
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ecs.amazonaws.com
      Path: /
      Policies:
        - PolicyName: ecs-service-policy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                - elasticloadbalancing:Describe*
                - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                - elasticloadbalancing:DeregisterTargets
                - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                - elasticloadbalancing:RegisterTargets
                - ec2:Describe*
                - ec2:AuthorizeSecurityGroupIngress
              Resource: '*'
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerListener
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      LaunchType: EC2
      LoadBalancers:
        - ContainerName: practice-node-server
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroupLoadBalancer
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref ECSTaskDefinition
Outputs:
  ECSCluster:
    Description: The ECS Cluster Name
    Value: !Ref ECSCluster
  ECSService:
    Description: The ECS Service Name
    Value: !Ref ECSService